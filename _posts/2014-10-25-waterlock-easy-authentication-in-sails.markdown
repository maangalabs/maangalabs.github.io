---
layout: post
title: "Waterlock-easy authentication in Sails"
date: 2014-10-25 18:14:47 +0530
comments: true
categories: sails nodejs webdevelopment
author: pranavrajs	
featured_image: /images/posts/9/waterlock-7.png
---

Hello all,

This is a new tutorial on Sails . Many of you were asking how to implement authentication in Sails. Here i've an awesome tool called <a href="http://waterlock.ninja/" target="_blank">Waterlock</a> which enables easier authentication methods. 
<!-- more -->
<h4>What is Waterlock ?</h4>

As its official website says , Waterlock is an all encompassing user authentication/json web token management tool, built for Sails. It provides user authentication , json webtokens and customisation.Waterlock provides you nice generators, so you can get up and running fast spend less time building structure and more time working on features!

So let's get started.

<h4>Create a sails app</h4>

{% highlight text %}
sails new authapp
{% endhighlight  %}

![Waterlock-1]({{ site.url }}/images/posts/9/waterlock-1.png)

Move to the Sails app directory.

<h4>Waterlock Installation</h4>

As every other node module , waterlock is also installed using npm. You have an advantage here, that this tool is exclusively built for Sails.

{% highlight text %}
npm install waterlock
{% endhighlight  %}

![Waterlock-2]({{ site.url }}/images/posts/9/waterlock-2.png)

Authentication itself is handled via modular libraries, making Waterlock more lightweight. The current auth libraries are listed below.

<table class="table table-condensed">
	<tr>
		<th>Method</th>
		<th>Library</th>
	</tr>
	<tr>
		<td>Local Auth</td>
		<td>waterlock-local-auth</td>
	</tr>	
	<tr>
		<td>Twitter Auth</td>
		<td>waterlock-twitter-auth</td>
	</tr>	
	<tr>
		<td>Facebook Auth</td>
		<td>waterlock-facebook-auth</td>
	</tr>	
</table>

<h4>Using Local Auth</h4>

Install local auth.
{% highlight text %}
npm install waterlock-local-auth
{% endhighlight  %}

![Waterlock-3]({{ site.url }}/images/posts/9/waterlock-3.png)

<h4>Generate local auth</h4>

The executable script provided with Waterlock `./node_modules/.bin/waterlock` gives you all the power you need to generate the different components of Waterlock.

Execute the command - 
{% highlight text %}
./node_modules/.bin/waterlock generate
{% endhighlight  %}

![Waterlock-4]({{ site.url }}/images/posts/9/waterlock-4.png)

You will see the list of resources Waterlock provides you.These are generated dynamically based on the auth method you have used. Let us choose `all` for now.

{% highlight text %}
./node_modules/.bin/waterlock generate all
{% endhighlight  %}

Now you can see the list of files generated by waterlock.

![Waterlock-5]({{ site.url }}/images/posts/9/waterlock-5.png)

Let us see the config file now.You have following options 

<ul>
  <li>
    <code>baseUrl</code> - this is the URL your app resides at, used in password reset urls
  </li>
  <li>
    <code>jsonWebTokens</code> - object containing information on how the jwt's should be constructed
  </li>
</ul>

Configure with your app `secret`.

Let us try authentication now. Create a new api `post`
{% highlight text%}
sails generate api post
{% endhighlight  %}

In Post Controller file add new function `restricted` as given below.
{% highlight  javascript %}
/**
 * PostController
 *
 * @description :: Server-side logic for managing posts
 * @help        :: See http://links.sailsjs.org/docs/controllers
 */

module.exports = {
	restricted:function(req,res){
		return res.ok("If You can see this you are authenticated");
	},	
	open:function(req,res){
		return res.ok("This is open to all!!!");
	}
};
{% endhighlight  %}

Now let us apply some policies here . Sails uses basic sessionAuth. So we will add this to policies file in sails.

{% highlight  javascript %}
/**
 * Policy Mappings
 * (sails.config.policies)
 *
 * Policies are simple functions which run **before** your controllers.
 * You can apply one or more policies to a given controller, or protect
 * its actions individually.
 *
 * Any policy file (e.g. `api/policies/authenticated.js`) can be accessed
 * below by its filename, minus the extension, (e.g. "authenticated")
 *
 * For more information on configuring policies, check out:
 * http://sailsjs.org/#!documentation/
 */


module.exports.policies = {

  '*': true,
  PostController:{
  	restricted:['sessionAuth'],
  	open:true
  }
};

{% endhighlight  %}

Let us lift the app again.Let us see what happens.

Let us go to `http://localhost:1337/post/open` You can see the following 


![Waterlock-6]({{ site.url }}/images/posts/9/waterlock-6.png)

Yeah !!! This is open to all users . So let us see what happens when we load our restricted page.

`http://localhost:1337/post/restricted`

![Waterlock-7]({{ site.url }}/images/posts/9/waterlock-7.png)

Yeah!!! Authentication works. You see the restricted access page. So now let us create a user and check whether the authentication works correct. 

<h4>Create a user</h4>

You can create a user by POSTing data to `http://localhost:1337/auth/login`. 

I've used POSTMAN for creating a post request to the AuthController 

![Waterlock-8]({{ site.url }}/images/posts/9/waterlock-8.png)

You'll be automatically logged in when you create a user. So let us check the `restricted` page once again.

![Waterlock-9]({{ site.url }}/images/posts/9/waterlock-9.png)


Yeah!!! It works perfect. This was a tutorial developed on Session based authentication adapted from the Intro given by Waterlock. Let us see how to create a JSON token based authentication and create a complete user login/registration system with Waterlock,Angular and obiviously Sails in next tutorials.

So this is the end of this tutorial. Let us see in the next tutorial, bye :)


